// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DbFirstContext))]
    [Migration("20230925205449_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Core.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IddepartamentoFk")
                        .HasColumnType("int")
                        .HasColumnName("iddepartamentoFk");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IddepartamentoFk" }, "FK_iddepartamento");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdpaisFk")
                        .HasColumnType("int")
                        .HasColumnName("idpaisFk");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdpaisFk" }, "FK_idpais");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("FechaRegistro")
                        .HasColumnType("date")
                        .HasColumnName("fechaRegistro");

                    b.Property<int?>("IdDocumento")
                        .HasColumnType("int")
                        .HasColumnName("idDocumento");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDocumento" }, "Fk_idDocumento");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipoDocumento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UbicacionPersona", b =>
                {
                    b.Property<int>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDireccion");

                    b.Property<string>("Bis")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("bis")
                        .IsFixedLength();

                    b.Property<string>("Cardinal")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal")
                        .IsFixedLength();

                    b.Property<string>("CardinalSec")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinalSec")
                        .IsFixedLength();

                    b.Property<string>("Complemento")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("complemento");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int")
                        .HasColumnName("idCiudad");

                    b.Property<string>("IdPersona")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("idPersona");

                    b.Property<string>("Letra")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra")
                        .IsFixedLength();

                    b.Property<string>("LetraSec")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letraSec")
                        .IsFixedLength();

                    b.Property<string>("LetraTer")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letraTer")
                        .IsFixedLength();

                    b.Property<short?>("NumeroPri")
                        .HasColumnType("smallint")
                        .HasColumnName("numeroPri");

                    b.Property<short?>("NumeroSec")
                        .HasColumnType("smallint")
                        .HasColumnName("numeroSec");

                    b.Property<short?>("NumeroTer")
                        .HasColumnType("smallint")
                        .HasColumnName("numeroTer");

                    b.Property<string>("TipoDeVia")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipoDeVia");

                    b.HasKey("IdDireccion")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCiudad" }, "FK_idCiudad");

                    b.HasIndex(new[] { "IdPersona" }, "FK_idPersona");

                    b.ToTable("ubicacionPersona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Ciudad", b =>
                {
                    b.HasOne("Core.Entities.Departamento", "IddepartamentoFkNavigation")
                        .WithMany("Ciudads")
                        .HasForeignKey("IddepartamentoFk")
                        .HasConstraintName("FK_iddepartamento");

                    b.Navigation("IddepartamentoFkNavigation");
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.HasOne("Core.Entities.Pais", "IdpaisFkNavigation")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdpaisFk")
                        .HasConstraintName("FK_idpais");

                    b.Navigation("IdpaisFkNavigation");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.HasOne("Core.Entities.TipoDocumento", "IdDocumentoNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdDocumento")
                        .HasConstraintName("Fk_idDocumento");

                    b.Navigation("IdDocumentoNavigation");
                });

            modelBuilder.Entity("Core.Entities.UbicacionPersona", b =>
                {
                    b.HasOne("Core.Entities.Ciudad", "IdCiudadNavigation")
                        .WithMany("UbicacionPersonas")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("FK_idCiudad");

                    b.HasOne("Core.Entities.Persona", "IdPersonaNavigation")
                        .WithMany("UbicacionPersonas")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_idPersona");

                    b.Navigation("IdCiudadNavigation");

                    b.Navigation("IdPersonaNavigation");
                });

            modelBuilder.Entity("Core.Entities.Ciudad", b =>
                {
                    b.Navigation("UbicacionPersonas");
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudads");
                });

            modelBuilder.Entity("Core.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Navigation("UbicacionPersonas");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
